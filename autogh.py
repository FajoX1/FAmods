#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: AutoGH
# Description: –ê–≤—Ç–æ-–∫–æ–º–º–∏—Ç—ã –≤ Github
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/autogh.png?raw=true
# requires: PyGithub
# ---------------------------------------------------------------------------------

import asyncio
import logging

from github import Github
from datetime import datetime

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class AutoGH(loader.Module):
    """–ê–≤—Ç–æ-–∫–æ–º–º–∏—Ç—ã –≤ Github"""

    strings = {
        "name": "AutoGH",

        "no_cfg": "<b><emoji document_id=5854929766146118183>üö´</emoji> –ù–µ—Ç—É {}! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ config —á–µ—Ä–µ–∑ <code>{}cfg AutoGH</code></b>",

        "autocommit_on": "<b><emoji document_id=4985961065012527769>üñ•</emoji> –ê–≤—Ç–æ-–∫–æ–º–º–∏—Ç –≤–∫–ª—é—á–µ–Ω!</b>",
        "autocommit_off": "<b><emoji document_id=5854929766146118183>üö´</emoji> –ê–≤—Ç–æ-–∫–æ–º–º–∏—Ç –≤—ã–∫–ª—é—á–µ–Ω!</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "API_TOKEN",
                None,
                lambda: "Github API Token. –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –≤ https://github.com/settings/tokens/new",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "REPO",
                None,
                lambda: "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ-–∫–æ–º–º–∏—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: FajoX1/FAmods",
            ),
            loader.ConfigValue(
                "file_name",
                "autocommit.txt",
                lambda: "–§–∞–π–ª –¥–ª—è –∞–≤—Ç–æ-–∫–æ–º–º–∏—Ç–∞",
            ),
            loader.ConfigValue(
                "commit_name",
                "AutoCommit",
                lambda: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞",
            ),
            loader.ConfigValue(
                "time_autocommit",
                3600,
                lambda: "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—â–∏–π –∫–æ–º–º–∏—Ç",
            ),
            loader.ConfigValue(
                "log",
                True,
                lambda: "–õ–æ–≥–∏ –æ —Ç–æ–º —á—Ç–æ —Å–¥–µ–ª–∞–ª–∏/–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç",
                validator=loader.validators.Boolean(),
            ),
        )


    async def client_ready(self, client, db):
        self.db = db
        self._client = client

        asyncio.create_task(self._autocommit())

    async def _autocommit(self):
      while True:
        if self.db.get(self.name, "autocommit", False):
            try:
                g = Github(self.config['API_TOKEN'])
                repo = g.get_repo(self.config['REPO'])
                file_content = f'Commit at {datetime.now()}'
                try:
                    contents = repo.get_contents(self.config['file_name'])
                    sha = contents.sha
                    repo.update_file(self.config['file_name'], self.config['commit_name'], file_content, sha)
                except:
                    repo.create_file(self.config['file_name'], self.config['commit_name'], file_content)
                if self.config['log']:
                    logger.info("Auto commited")
            except Exception as e:
                if self.config['log']:
                    logger.error(f"Can't commit:\n{e}")
        
        await asyncio.sleep(self.config['time_autocommit'])

    @loader.command()
    async def autocommit(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç"""

        if not self.config['API_TOKEN']:
            return await utils.answer(message, self.strings['no_cfg'].format("—Ç–æ–∫–µ–Ω–∞ github", self.get_prefix()))
        
        if not self.config['REPO']:
            return await utils.answer(message, self.strings['no_cfg'].format("–Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", self.get_prefix()))

        if self.db.get(self.name, "autocommit", False):
            self.db.set(self.name, "autocommit", False)
            return await utils.answer(message, self.strings["autocommit_off"])

        self.db.set(self.name, "autocommit", True)

        await utils.answer(message, self.strings["autocommit_on"])