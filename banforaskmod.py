#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: BanForAskMod
# Description: –ë–∞–Ω –∑–∞ –ø—Ä–æ—Å—å–±—É –¥–∞—Ç—å –º–æ–¥—É–ª–µ–π
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/banforaskmod.png?raw=true
# ---------------------------------------------------------------------------------

import re
import asyncio

import logging

from telethon.tl.types import ChatBannedRights
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class BanForAskMod(loader.Module):
    """–ë–∞–Ω –∑–∞ –ø—Ä–æ—Å—å–±—É –¥–∞—Ç—å –º–æ–¥—É–ª–µ–π"""

    strings = {
        "name": "BanForAskMod",

        "cannot_ban": "<emoji document_id=5440381017384822513>‚ùå</emoji> <b>–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",

        "opening_settings": "<emoji document_id=5334885140147479028>üîÑ</emoji> <b>–û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É...</b>",
    }

    
    BANNED_RIGHTS = {
        "view_messages": False,
        "send_messages": False,
        "send_media": False,
        "send_stickers": False,
        "send_gifs": False,
        "send_games": False,
        "send_inline": False,
        "send_polls": False,
        "change_info": False,
        "invite_users": False,
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "status",
                False,
                lambda: "–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –±–∞–Ω",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "chats",
                [],
                lambda: "–ê–π–¥–∏ —á–∞—Ç–æ–≤ –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–¥—É–ª—å. –ü—Ä–∏–º–µ—Ä: 42348439320",
                validator=loader.validators.Series(loader.validators.TelegramID())
            ),
            loader.ConfigValue(
                "text",
                "<b>üë®‚Äç‚öñÔ∏è {user} –∑–∞–±–∞–Ω–µ–Ω!\n–ü—Ä–∏—á–∏–Ω–∞:</b> <i>–ü—Ä–æ—Å—å–±–∞ –¥–∞—Ç—å –º–æ–¥—É–ª–µ–π</i>",
                lambda: "–¢–µ–∫—Å—Ç –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ),
        )


    async def client_ready(self, client, db):
        self.db = db
        self._client = client

    @loader.command()
    async def bfmsettings(self, message):
        """–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–¥—É–ª—è"""

        m = await utils.answer(message, self.strings['opening_settings'])
    
        await self.invoke("config", "banforaskmod", message.peer_id)

        await message.delete()

    async def watcher(self, event):
        if not self.config['status']:
            return

        chat_id = utils.get_chat_id(event)
    
        if str(chat_id) not in map(str, [str(c).replace("-100", "") for c in self.config['chats']]):
            return

        pattern = r'(?:–¥–∞–π(?:—Ç–µ)?(?:\s+–º–æ–¥—É[–ª–ª][–µ—å]?[–π—è]?| –º–æ–¥—É[–ª–ª][–µ—å]?[–π—è]?)|–º–æ–¥—É[–ª–ª][–µ—å]?[–π—è]?\s+–¥–∞–π(?:—Ç–µ)?)'

        match = re.search(pattern, event.raw_text.lower())
        if not match:
            return

        try:
            await self._client.edit_permissions(
                chat_id,
                event.from_id,
                until_date=0,
                **self.BANNED_RIGHTS,
            )
            await utils.answer(event, self.config['text'].format(user=f"<a href='tg://user?id={event.from_id}'>{event.sender.first_name + (event.sender.last_name if event.sender.last_name else '')}</a>"))
        except Exception as e:
            logger.error(e)
            await utils.answer(event, self.strings['cannot_ban'])