#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: Fun
# Description: Module for fun
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/fun.png?raw=true
# ---------------------------------------------------------------------------------

import random
import asyncio
import logging

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class Fun(loader.Module):
    """Module for fun..."""

    strings = {
        "name": "Fun",

        "no_us": "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–î–æ–ª–∂–Ω–æ –±—ã—Ç—å .hacku [—é–∑–µ—Ä–Ω–µ–π–º/–Ω–∏–∫ —á–µ–ª–∞]</b>",
        "no_typing_text": "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–î–æ–ª–∂–Ω–æ –±—ã—Ç—å .ftype [—Ç–µ–∫—Å—Ç]</b>",

        "hacku_process": "<emoji document_id=6334357625160861194>üíª</emoji> <b>–í–∑–ª–æ–º {} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... {}%</b>",
        "hackedu": "<emoji document_id=5854762571659218443>‚úÖ</emoji> <b>{} —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!</b>",
        "collecting_info": "<b><emoji document_id=6334778871258286021>üíæ</emoji> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {}... {}%</b>",
        "collected_info": "<emoji document_id=5854762571659218443>‚úÖ</emoji> <b>–£—Å–ø–µ—à–Ω–æ –Ω–∞—à—ë–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {}</b>",

        "hackp_process": "<emoji document_id=5370872220149099318>üëÆ‚Äç‚ôÄÔ∏è</emoji> <b>–í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... {}%</b>",
        "hackedp": "üü¢ <b>–ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!</b>",
        "founding_nlo": "<b><emoji document_id=5371018382181145040>üëΩ</emoji> –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ... {}%</b>",
        "dino_founded": "<emoji document_id=5460873384390830669>ü¶ñ</emoji> <b>–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –Ω–∞ –∑–µ–º–ª–µ!</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "TYPING_SYMBOL",
                "_",
                lambda: "–ü–µ—á–∞—Ç–∞—é—â–∏–π —Å–∏–º–≤–æ–ª –≤ .ftype",
            ),
            loader.ConfigValue(
                "WAITING_TIME",
                0.05,
                lambda: "–°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—á–∞—Ç—é –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –≤ .ftype",
            )
        )


    async def client_ready(self, client, db):
        self.db = db
        self._client = client

    @loader.command()
    async def hacku(self, message):
        """–í–∑–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        us = utils.get_args_raw(message)
        if not us:
             return await utils.answer(message, self.strings["no_us"])

        perc = 0
 
        while(perc < 100):
                await utils.answer(message, self.strings["hacku_process"].format(us, perc))
                perc += random.randint(1, 3)
                await asyncio.sleep(0.3)
        
        await utils.answer(message, self.strings["hackedu"].format(us))

        await asyncio.sleep(3)

        perc = 0
 
        while(perc < 100):
            await utils.answer(message, self.strings["collecting_info"].format(us, perc))
            perc += random.randint(1, 5)
            await asyncio.sleep(0.33)
 
        await utils.answer(message, self.strings["collected_info"].format(us))

    @loader.command()
    async def hackp(self, message):
        """–í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞"""
        perc = 0
 
        while(perc < 100):
                await utils.answer(message, self.strings["hackp_process"].format(perc))
                perc += random.randint(1, 3)
                await asyncio.sleep(0.3)
        
        await utils.answer(message, self.strings["hackedp"])

        await asyncio.sleep(3)

        perc = 0
 
        while(perc < 100):
            await utils.answer(message, self.strings["founding_nlo"].format(perc))
            perc += random.randint(1, 5)
            await asyncio.sleep(0.33)
 
        await utils.answer(message, self.strings["dino_founded"])

    @loader.command()
    async def ftype(self, message):
        """–ü–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç"""
        orig_text = utils.get_args_raw(message)
        if not orig_text:
             return await utils.answer(message, self.strings["no_typing_text"])
        
        text = orig_text

        tbp = ""
        typing_symbol = self.config["TYPING_SYMBOL"]
        waiting_seconds = self.config["WAITING_TIME"]

        while(tbp != orig_text):
            await utils.answer(message, tbp + typing_symbol)
            await asyncio.sleep(waiting_seconds)
 
            tbp = tbp + text[0]
            text = text[1:]
 
            await utils.answer(message, tbp)
            await asyncio.sleep(waiting_seconds)