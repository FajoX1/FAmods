#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: HbotCommand
# Description: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ inline –±–æ—Ç–∞
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/hbotcommand.png?raw=true
# ---------------------------------------------------------------------------------

import re
import asyncio 
import logging

from aiogram import types
from .. import loader, utils
from ..inline.types import BotInlineMessage

logger = logging.getLogger(__name__)

@loader.tds
class HbotCommand(loader.Module):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–≤–æ–µ–≥–æ inline –±–æ—Ç–∞"""

    strings = {
        "name": "HbotCommand",

        "loading_cfg": "<b><emoji document_id=5334904192622403796>üîÑ</emoji> –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É...</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "command_text",
                "<b>–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ .cfg HbotCommand</b>",
                lambda: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
            ),
            loader.ConfigValue(
                "command_image",
                "https://2.bp.blogspot.com/-wkYFtsM9jf8/XD9CK8-u-rI/AAAAAAAAArI/OWAfpxubCXA4H7sG72YPDEqR8I_yR7AeACKgBGAs/w4096-h2304-c/shooting-star-sunset-anime-horizon-30-4k.jpg",
                lambda: "–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è",
            ),
            loader.ConfigValue(
                "command_button",
                """FAmods, https://t.me/famods""",
                lambda: "–ö–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            ),
            loader.ConfigValue(
                "command_name",
                "/famods",
                lambda: "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            ),
            loader.ConfigValue(
                "command_work",
                True,
                lambda: "–ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                validator=loader.validators.Boolean()
            ),
        )


    async def client_ready(self, client, db):
        self.db = db
        self._client = client

    @loader.command()
    async def busername(self, message):
        """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞"""

        await utils.answer(message, f"<b><emoji document_id=5785175271011259591>üåÄ</emoji> Username –±–æ—Ç–∞: @{self.inline.bot_username}</b>")
        
    @loader.command()
    async def bcsettings(self, message):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""

        msg = await utils.answer(message, self.strings['loading_cfg'])

        await self.invoke("config", "HbotCommand", message.peer_id)

        await msg.delete()

    async def aiogram_watcher(self, message: BotInlineMessage):
        if self.config['command_work'] and message.text == self.config['command_name']:
            markup = None
            if self.config['command_button']:
                markup = types.InlineKeyboardMarkup()
                pattern = r'(\w+),\s(https?://\S+)'
                matches = re.findall(pattern, self.config['command_button'])
                if matches:
                    title, url = matches[0]
                    button = types.InlineKeyboardButton(text=title, url=url)
                    markup.add(button)

            if self.config['command_image']:
                return await message.answer_photo(photo=self.config['command_image'], caption=self.config['command_text'], reply_markup=markup)

            await message.answer(
                self.config['command_text'],
                reply_markup=markup
            )