#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: Tonscan
# Description: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON –∞–¥—Ä–µ—Å–µ
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/tonscan.png?raw=true
# requires: requests
# ---------------------------------------------------------------------------------

import requests

from .. import loader, utils

@loader.tds
class Tonscan(loader.Module):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON –∞–¥—Ä–µ—Å–µ"""

    strings = {
        "name": "Tonscan",

        "waiting": "<b><emoji document_id=6334391057186293707>üïë</emoji> –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...</b>",
    }

    @loader.command()
    async def tonwallet(self, message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON –∫–æ—à–µ–ª—å–∫–µ"""
        address = utils.get_args_raw(message)

        if not address:
            return await utils.answer(message, f"<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–î–æ–ª–∂–Ω–æ –±—ã—Ç—å</b> <code>.tonwallet –∞–¥—Ä–µ—Å_–∫–æ—à–µ–ª—å–∫–∞</code>")
        
        await utils.answer(message, self.strings["waiting"])

        response = requests.get(f"https://tonapi.io/v2/accounts/{address}").json()

        try:
          response['error']
          if "can't decode address" in response['error']:
            return await utils.answer(message, f"<b>‚ùå –≠—Ç–æ –Ω–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!</b>")

          return await utils.answer(message, f"""<b>‚ùå –û—à–∏–±–∫–∞!\n\n
```json 
{response['error']}                                    
```</b>""")
        except:
           pass
        
        scam = "–ù–µ—Ç"

        if response['is_scam'] == "True":
           scam = "–î–∞"

        await utils.answer(message, f"""<b>
<emoji document_id=5854713299794398583>üíé</emoji> Ton wallet

–ò–º—è: <code>{response['name']}</code>

–ê–¥—Ä–µ—Å: <code>{address}</code>
–ë–∞–ª–∞–Ω—Å: <code>{response['balance']} TON</code>

–°–∫–∞–º: </b><i>{scam}</i><b>
–°—Ç–∞—Ç—É—Å: </b><i>{response['status']}</i><b>
–ü–æ—Å–ª–µ–¥–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: </b><i>{response['last_activity']}</i><b>
–ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>{response['interfaces'][0]}</code>

<a href="https://tonscan.org/address/{address}">Tonscan</a> ‚Ä¢ <a href="{response['icon']}">–ê–≤–∞—Ç–∞—Ä–∫–∞</a> ‚Ä¢ <a href="https://tonscan.org/address/{address}#transactions">–ò—Å—Ç–æ—Ä–∏—è</a> ‚Ä¢ <a href="https://tonscan.org/address/{address}#nfts">NFT</a> ‚Ä¢ <a href="https://tonscan.org/address/{address}#tokens">jettons</a> ‚Ä¢ <a href="https://tonscan.org/address/{address}#source">Contract</a>
</b>""")
        
    @loader.command()
    async def tonjetton(self, message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON —Ç–æ–∫–µ–Ω–µ"""
        address = utils.get_args_raw(message)

        if not address:
            return await utils.answer(message, f"<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–î–æ–ª–∂–Ω–æ –±—ã—Ç—å</b> <code>.tonjetton –∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞</code>")
        
        await utils.answer(message, self.strings["waiting"])

        response = requests.get(f"https://tonapi.io/v2/jettons/{address}").json()

        try:
          response['error']
          return await utils.answer(message, f"""<b>‚ùå –û—à–∏–±–∫–∞!\n\n
```json 
{response['error']}                                    
```</b>""")
        except:
           pass
        
        try:
           response['metadata']['description']
           descr = f"\n</b><i>{response['metadata']['description']}</i><b>\n"
        except:
           descr = ""

        try:
           response['metadata']['social']

           socials = """–°—Å—ã–ª–∫–∏:
"""
           for s in response['metadata']['social']:
              socials += s + "\n"
           socials += "\n"
        except:
           socials = ""

        await utils.answer(message, f"""<b>
<emoji document_id=5854713299794398583>üíé</emoji> Ton jetton

–ò–º—è: <code>{response['metadata']['name']}</code>
–°–∏–º–≤–æ–ª: <code>{response['metadata']['symbol']}</code>
{descr}
–ê–¥—Ä–µ—Å: <code>{address}</code>
–û–±—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: <code>{response['total_supply']} TON</code>

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π: <code>{response['holders_count']}</code>

{socials}<a href="https://tonscan.org/jetton/{address}">Tonscan</a> ‚Ä¢ <a href="{response['metadata']['image']}">–õ–æ–≥–æ</a> ‚Ä¢ <a href="https://tonscan.org/jetton/{address}#transactions">–ò—Å—Ç–æ—Ä–∏—è</a> ‚Ä¢ <a href="https://tonscan.org/jetton/{address}#holders">–¢–æ–ø –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π</a> ‚Ä¢ <a href="https://tonscan.org/jetton/{address}#source">Contract</a>
</b>""")
        
    @loader.command()
    async def tonnftcol(self, message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        address = utils.get_args_raw(message)

        if not address:
            return await utils.answer(message, f"<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–î–æ–ª–∂–Ω–æ –±—ã—Ç—å</b> <code>.tonnftcol –∞–¥—Ä–µ—Å_–∫–æ–ª–ª–µ–∫—Ü–∏–∏</code>")
        
        await utils.answer(message, self.strings["waiting"])

        response = requests.get(f"https://tonapi.io/v2/nfts/collections/{address}").json()

        try:
          response['error']
          return await utils.answer(message, f"""<b>‚ùå –û—à–∏–±–∫–∞!\n\n
```json 
{response['error']}                                    
```</b>""")
        except:
           pass
        
        try:
           response['metadata']['description']
           descr = f"\n</b><i>{response['metadata']['description']}</i><b>\n"
        except:
           descr = ""

        try:
           response['metadata']['external_link']
           external_link = f"\n–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞: {response['metadata']['external_link']}\n"
        except:
           external_link = ""

        try:
           response['metadata']['social_links']

           socials = """–°—Å—ã–ª–∫–∏:
"""
           for s in response['metadata']['social']:
              socials += s + "\n"
           socials += "\n"
        except:
           socials = ""

        try:
           response['metadata']['approved_by']

           approved_by = """–û–¥–æ–±—Ä–µ–Ω–æ:
"""
           for s in response['metadata']['approved_by']:
              approved_by += s + "\n"
           approved_by += "\n"
        except:
           approved_by = ""

        await utils.answer(message, f"""<b>
<emoji document_id=5854713299794398583>üíé</emoji> Ton NFT collection

–ò–º—è: <code>{response['metadata']['name']}</code>
–ê–¥—Ä–µ—Å: <code>{address}</code>
{descr}
{external_link}
{approved_by}{socials}<a href="https://tonscan.org/nft/{address}">Tonscan</a> ‚Ä¢ <a href="https://tonscan.org/nft/{address}">–ö–æ–ª–ª–µ–∫—Ü–∏—è</a> ‚Ä¢ <a href="{response['metadata']['image']}">–õ–æ–≥–æ</a> ‚Ä¢ <a href="{response['metadata']['cover_image']}">–ë–∞–Ω–Ω–µ—Ä</a>
</b>""")
        
    @loader.command()
    async def tonnft(self, message):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TON NFT"""
        address = utils.get_args_raw(message)

        if not address:
            return await utils.answer(message, f"<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–î–æ–ª–∂–Ω–æ –±—ã—Ç—å</b> <code>.tonnft –∞–¥—Ä–µ—Å_nft</code>")
        
        await utils.answer(message, self.strings["waiting"])

        response = requests.get(f"https://tonapi.io/v2/nfts/{address}").json()

        try:
          response['error']
          return await utils.answer(message, f"""<b>‚ùå –û—à–∏–±–∫–∞!\n\n
```json 
{response['error']}                                    
```</b>""")
        except:
           pass
        
        try:
           response['metadata']['description']
           descr = f"\n</b><i>{response['metadata']['description']}</i><b>\n"
        except:
           descr = ""

        try:
           response['collection']['name']
           coll = f"\n–ö–æ–ª–µ–∫—Ü–∏—è: <code>{response['collection']['name']}</code>\n"
        except:
           coll = ""

        try:
           response['metadata']['external_link']
           external_link = f"\n–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞: {response['metadata']['external_link']}\n"
        except:
           external_link = ""

        try:
           response['metadata']['social_links']

           socials = """–°—Å—ã–ª–∫–∏:
"""
           for s in response['metadata']['social']:
              socials += s + "\n"
           socials += "\n"
        except:
           socials = ""

        try:
           response['metadata']['approved_by']

           approved_by = """–û–¥–æ–±—Ä–µ–Ω–æ:
"""
           for s in response['metadata']['approved_by']:
              approved_by += s + "\n"
           approved_by += "\n"
        except:
           approved_by = ""

        await utils.answer(message, f"""<b>
<emoji document_id=5854713299794398583>üíé</emoji> Ton NFT      
{coll}
–ò–º—è: <code>{response['metadata']['name']}</code>
–ê–¥—Ä–µ—Å: <code>{address}</code>
{descr}
{external_link}
{approved_by}{socials}<a href="https://tonscan.org/nft/{address}">Tonscan</a> ‚Ä¢ <a href="{response['metadata']['image']}">NFT —Ñ–æ—Ç–æ</a>
</b>""")
