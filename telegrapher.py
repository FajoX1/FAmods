#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: Telegrapher
# Description: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∏ –¥—Ä—É–≥–æ–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å telegra.ph
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/telegrapher.png?raw=true
# requires: aiohttp telegraph
# ---------------------------------------------------------------------------------

import logging
import aiohttp
import asyncio
from telegraph import Telegraph

from telethon import types
from telethon.tl.types import DocumentAttributeFilename
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class Telegrapher(loader.Module):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∏ –¥—Ä—É–≥–æ–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å telegra.ph"""

    strings = {
        "name": "Telegrapher",

        "waiting": "<b><emoji document_id=6334391057186293707>üïë</emoji> –°–æ–∑–¥–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ telegra.ph...</b>",
        "waiting_up": "<b><emoji document_id=6334391057186293707>üïë</emoji> –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –Ω–∞ telegra.ph...</b>",

        "article_ready": """<b>
<emoji document_id=6334758581832779720>‚úÖ</emoji> –¢–≤–æ—è —Å—Ç–∞—Ç—å—è –≤ Telegra.ph —Å–æ–∑–¥–∞–Ω–∞!

<emoji document_id=5271604874419647061>üîó</emoji> –°—Å—ã–ª–∫–∞: {}

<emoji document_id=6334638004920911460>‚ÑπÔ∏è</emoji> </b><i>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫/–∫–æ–Ω—Ç–µ–Ω—Ç/–∞–≤—Ç–æ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–∂–Ω–æ –≤ <code>{}cfg telegrapher</code></i>
""",
        "upload_ready": """<b>
<emoji document_id=6334353510582191829>‚¨áÔ∏è</emoji> –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!

<emoji document_id=5271604874419647061>üîó</emoji> –°—Å—ã–ª–∫–∞: {}
</b>""",
       "upload_error": "<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ telegra.ph!</b>",

       "media_type_invalid": "<emoji document_id=5019523782004441717>‚ùå</emoji> <b>–û—Ç–≤–µ—Ç—å –Ω–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ/–≥–∏—Ñ</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "TITLE",
                "FAmods telegrapher",
                lambda: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏",
            ),
            loader.ConfigValue(
                "CONTENT",
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫/–∫–æ–Ω—Ç–µ–Ω—Ç/–∞–≤—Ç–æ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–∂–Ω–æ –≤ .cfg telegrapher",
                lambda: "–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å html-—Ä–∞–∑–º–µ—Ç–∫—É)",
            ),
            loader.ConfigValue(
                "author_name",
                "famods",
                lambda: "–ê–≤—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏",
            ),
            loader.ConfigValue(
                "author_short_name",
                "famods",
                lambda: "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏ (–Ω—É–∂–Ω–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ telegraph api)",
            ),
        )


    async def client_ready(self, client, db):
        self.db = db
        self._client = client

    @loader.command()
    async def tghpost(self, message):
        """–í—ã–ª–æ–∂–∏—Ç—å —Å—Ç–∞—Ç—å—é –≤ telegra.ph"""

        await utils.answer(message, self.strings['waiting'])

        telegraph_api = Telegraph() 
        telegraph_api.create_account(short_name=self.config["author_short_name"], author_name=self.config["author_name"])
        response = telegraph_api.create_page(
            title=self.config["TITLE"], 
            html_content=self.config["CONTENT"],
            author_name=self.config["author_name"],
         )

        return await utils.answer(message, self.strings['article_ready'].format(f"https://telegra.ph/{response['path']}", self.get_prefix()))

    @loader.command()
    async def tghup(self, message):
        """–í—ã–ª–æ–∂–∏—Ç—å –º–µ–¥–∏–∞ –≤ telegra.ph"""
        reply_message = await message.get_reply_message()

        if not reply_message or not reply_message.media:
            await utils.answer(message, self.strings['media_type_invalid'])
            return
        
        await utils.answer(message, self.strings['waiting_up'])

        media_data = await self.check_media_type(reply_message.media)

        if not media_data:
            await utils.answer(message, self.strings['media_type_invalid'])
            return

        file_content = await message.client.download_media(media_data, bytes)
        telegraph_upload_url = "https://telegra.ph/upload"
        form = aiohttp.FormData()
        form.add_field('file', file_content, filename='file')

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(telegraph_upload_url, data=form) as response:
                    uploaded_data = await response.json()
                    telegraph_link = "https://telegra.ph" + uploaded_data[0]["src"]
        except Exception as e:
            logger.error(e)
            return await utils.answer(message, self.strings['upload_error'])

        await utils.answer(message, self.strings['upload_ready'].format(telegraph_link))

    async def check_media_type(self, media):
        if not media:
            return False

        if isinstance(media, types.MessageMediaPhoto):
            media_data = media.photo
        elif isinstance(media, types.MessageMediaDocument):
            document = media.document

            if any(
                isinstance(attribute, types.DocumentAttributeAudio)
                for attribute in document.attributes
            ):
                return False

            if DocumentAttributeFilename(file_name="AnimatedSticker.tgs") in document.attributes:
                return False

            media_data = document
        else:
            return False

        return media_data
