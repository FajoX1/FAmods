#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: Timer
# Description: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/timer.png?raw=true
# ---------------------------------------------------------------------------------

import pytz
import asyncio
import logging
from datetime import datetime

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class Timer(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å"""

    strings = {
        "name": "Timer",

        "no_date": "<b><emoji document_id=5019523782004441717>‚ùå</emoji> –î–æ–±–∞–≤—å —Å–Ω–∞—á–∞–ª–∞ –¥–∞—Ç—É –≤ <code>{}cfg timer</code></b>",

        "invalid_date": "<b><emoji document_id=5019523782004441717>‚ùå</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.</b>",
        "invalid_timezone": "<b><emoji document_id=5019523782004441717>‚ùå</emoji> –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.</b>"
    }

    time_units = [
            ('–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç'),
            ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'),
            ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'),
            ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'),
            ('—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥')
    ]

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "text",
                "<b>üïë –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —ç—Ç–æ–≥–æ –µ—â—ë {time}</b>",
                lambda: "–¢–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥–∞—Ç–æ–π. (–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É) –ü—Ä–∏–º–µ—Ä: üïë –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —ç—Ç–æ–≥–æ –µ—â—ë {time}",
            ),
            loader.ConfigValue(
                "text_already",
                "<b>‚úÖ –≠—Ç–æ —É–∂–µ —Å–ª—É—á–∏–ª–æ—Å—å {time} –Ω–∞–∑–∞–¥</b>",
                lambda: "–¢–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ —Å–ª—É—á–∏–ª–æ—Å—å. –ü—Ä–∏–º–µ—Ä: ‚úÖ –≠—Ç–æ —É–∂–µ —Å–ª—É—á–∏–ª–æ—Å—å {time} –Ω–∞–∑–∞–¥",
            ),
            loader.ConfigValue(
                "date",
                None,
                lambda: "–î–∞—Ç–∞ –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: 25.04.2025 17:05",
            ),
            loader.ConfigValue(
                "timezone",
                "auto",
                lambda: "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü—Ä–∏–º–µ—Ä: Europe/Moscow",
            ),
        )


    async def client_ready(self, client, db):
        self.db = db
        self._client = client

    @loader.command()
    async def stime(self, message):
        """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏"""

        if not self.config["date"]:
            return await utils.answer(message, self.strings['no_date'].format(self.get_prefix()))

        date_time_str = self.config['date']
        timezone = self.config.get('timezone', 'auto')

        try:
            date_str, time_str = date_time_str.split(' ')
        except ValueError:
            return await utils.answer(message, self.strings['invalid_date'])

        day, month, year = map(int, date_str.split("."))
        hour, minute = map(int, time_str.split(":"))

        now = datetime.now()

        if timezone == 'auto':
            event_time = datetime(year, month, day, hour, minute)
        else:
            try:
                user_timezone = pytz.timezone(timezone)
                event_time = user_timezone.localize(datetime(year, month, day, hour, minute), is_dst=None)
            except pytz.UnknownTimeZoneError:
                return await utils.answer(message, self.strings['invalid_timezone'])

        if timezone != 'auto':
            now = now.astimezone(user_timezone)

        was_t = now > event_time if timezone == 'auto' else now > event_time.astimezone(user_timezone)

        time_to_event = abs(now - event_time if timezone == 'auto' else now - event_time.astimezone(user_timezone))
        days = time_to_event.days

        years = days // 365
        days %= 365

        hours, remainder = divmod(time_to_event.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)

        time_values = [years, days, hours, minutes, seconds]
        time_to = ""

        for value, (singular, genitive, plural) in zip(time_values, self.time_units):
            if value > 0:
                form = singular if value == 1 else genitive if 1 < value < 5 else plural
                time_to += f"{value} {form} "
        time_to = time_to.rstrip()

        if time_to and not was_t:
            return await utils.answer(
                message,
                self.config["text"].format(time=time_to),
            )

        return await utils.answer(
            message,
            self.config["text_already"].format(time=time_to),
        )
