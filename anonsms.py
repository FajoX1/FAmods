#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: AnonSMS
# Description: –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/anonsms.png?raw=true
# ---------------------------------------------------------------------------------

import time
import asyncio
import logging

from .. import loader, utils

from ..inline.types import InlineCall, BotInlineMessage

logger = logging.getLogger(__name__)

@loader.tds
class AnonSMS(loader.Module):
    """–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""

    strings = {
        "name": "AnonSMS",

        "enter_message": "<b>üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>",

        "new_anon_msg": "<b>üì® –í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>",
        "opening_settings": "<b><emoji document_id=5327902038720257153>üîÑ</emoji> –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...</b>",

        "only_one": "<b>‚ùå –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ {} —Å–µ–∫—É–Ω–¥!</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "start_text",
                "<b>üëã –ü—Ä–∏–≤–µ—Ç!\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>",
                lambda: "–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ",
            ),
            loader.ConfigValue(
                "sent_text",
                "<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>",
                lambda: "–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            ),
            loader.ConfigValue(
                "error_send_text",
                "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>",
                lambda: "–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            ),
            loader.ConfigValue(
                "floodwait",
                15,
                lambda: "–†–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            ),
        )


    async def client_ready(self, client, db):
        self.db = db
        self._client = client

    async def _check_message_rate(self, user_id: int) -> bool:
        if user_id in self.last_message_time:
            last_time = self.last_message_time[user_id]
        
            if time.time() - last_time < self.config['floodwait']:
                return False

        self.last_message_time[user_id] = time.time()
        return True

    @loader.command()
    async def getanonlink(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""

        await utils.answer(message, f"<emoji document_id=5271604874419647061>üîó</emoji> <b>–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–º—Å:\n<code>https://t.me/{self.inline.bot_username}?start=anonsms</code></b>")

    @loader.command()
    async def anonsettings(self, message):
        """–ù–∞—Å—Ç—Ä–æ—è—Ç –º–æ–¥—É–ª—å"""

        await utils.answer(message, self.strings['opening_settings'])
        await self.invoke("config", "AnonSMS", message.peer_id)
        await message.delete()

    @loader.inline_everyone
    @loader.callback_handler()
    async def anon_sms(self, call: InlineCall):
        if call.data == "anon_cancel":
            self.inline.ss(call.from_user.id, False)
            await self.inline.bot.delete_message(
                call.message.chat.id,
                call.message.message_id,
            )
            return

        if call.data != "leave_anonsms":
            return

        self.inline.ss(call.from_user.id, "send_anonsms")
        await self.inline.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=self.strings['enter_message'],
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=self.inline.generate_markup(
            {"text": "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", "data": "anon_cancel"}
        ),
        )

    async def aiogram_watcher(self, message: BotInlineMessage):
        if message.text == "/start anonsms":
            return await message.answer(
                self.config["start_text"],
                reply_markup=self.inline.generate_markup(
            {"text": "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", "data": "leave_anonsms"}
        ),
            )
        if self.inline.gs(message.from_user.id) == "send_anonsms":
            if not await self._check_message_rate(message.from_user.id):
                await message.answer(self.strings['only_one'].format(self.config['floodwait']))
                return
            try:
                await self.inline.bot.send_message(self._tg_id, self.strings['new_anon_msg'])
                await message.send_copy(self._tg_id)
            except:
                return await message.answer(self.config['error_send_text'])
            return await message.answer(self.config["sent_text"])