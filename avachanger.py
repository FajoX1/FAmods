#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: AvaChanger
# Description: –°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/avachanger.png?raw=true
# ---------------------------------------------------------------------------------

import os
import asyncio
import tempfile

import logging

from telethon.tl.functions.photos import UploadProfilePhotoRequest

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class AvaChanger(loader.Module):
    """–°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""

    strings = {
        "name": "AvaChanger",

        "no_args": "<emoji document_id=5440381017384822513>‚ùå</emoji> <b>–ù—É–∂–Ω–æ <code>{}avatarl [—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑] [—Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π –∫–∞–∂–¥–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏]</code></b>",
        "no_reply": "<emoji document_id=5440381017384822513>‚ùå</emoji> <b>–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–∫–æ–π</b>",

        "changing_avatars": "<emoji document_id=5328274090262275771>üîÑ</emoji> <b>–ú–µ–Ω—è—é –∞–≤–∞—Ç–∞—Ä–∫–∏...</b>\n<i>‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç {} —Å–µ–∫—É–Ω–¥</i>",

        "was_off": "<emoji document_id=5440381017384822513>‚ùå</emoji> <b>–°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!</b>",

        "off": "<b><emoji document_id=5212932275376759608>‚úÖ</emoji> –í—ã–∫–ª—é—á–∏–ª —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∫–∏</b>",
        "completed": "<b><emoji document_id=5212932275376759608>‚úÖ</emoji> –ì–æ—Ç–æ–≤–æ. –°–º–µ–Ω–∏–ª –∞–≤–∞—Ç–∞—Ä–∫—É {} —Ä–∞–∑ –∑–∞ {} —Å–µ–∫—É–Ω–¥/</b>",
    }


    async def client_ready(self, client, db):
        self.db = db
        self._client = client
        
    @loader.command()
    async def avatarl(self, message):
        """–°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        
        args = utils.get_args_raw(message)

        try:
            counts, time_c = args.split(" ")
            counts = int(counts)
            time_c = int(time_c)
        except:
            return await utils.answer(message, self.strings['no_args'].format(self.get_prefix()))
        
        r = await message.get_reply_message()

        if not r:
            return await utils.answer(message, self.strings['no_reply'])
        
        m = await utils.answer(message, self.strings['changing_avatars'].format((time_c * counts)))

        self.m = m

        with tempfile.TemporaryDirectory() as temp_dir:
            file_path = os.path.join(temp_dir, os.path.basename("avatar.jpg"))
        
            await message.client.download_media(r.media.photo, file_path)

            for i in range(counts):
                if not self.m:
                    return
                await self.client(UploadProfilePhotoRequest(file=await self.client.upload_file(file_path)))
                await asyncio.sleep(time_c)

        self.m = None

        await utils.answer(message, self.strings['completed'].format(counts, (time_c * counts)))

    @loader.command()
    async def avatarl_stop(self, message):
        """–í—ã–∫–ª—é—á–∏—Ç—å —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""

        m = self.m
        self.m = None

        await utils.answer(m, self.strings['was_off'])
        await utils.answer(message, self.strings['off'])