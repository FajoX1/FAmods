#   ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñÑ‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÄ
#   ‚ñà‚ñÄ‚ñë‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ ‚ÄÉ‚ñà‚ñë‚ñÄ‚ñë‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñÄ‚ÄÉ‚ñÑ‚ñà

#   https://t.me/famods

# üîí    Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# ---------------------------------------------------------------------------------
# Name: xRocket
# Description: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ @xRocket
# meta developer: @FAmods
# meta banner: https://github.com/FajoX1/FAmods/blob/main/assets/banners/xrocket.png?raw=true
# ---------------------------------------------------------------------------------

import hikkatl
import asyncio

import logging

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class xRocket(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ @xRocket"""

    strings = {
        "name": "xRocket",

        "no_args": "<emoji document_id=5440381017384822513>‚ùå</emoji> <b>–ù—É–∂–Ω–æ <code>{}{}</code></b>",

        "creating": "<emoji document_id=5334904192622403796>üîÑ</emoji> <b>–°–æ–∑–¥–∞—é {}...</b>",
        "checking_wallet": "<emoji document_id=5334885140147479028>üîÑ</emoji> <b>–°–º–æ—Ç—Ä—é –∫–æ—à–µ–ª—ë–∫...</b>",

        "no_money": "<emoji document_id=5440381017384822513>‚ùå</emoji> <b>–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥</b>",

        "invoice": """<b>üíµ –°—á—ë—Ç –Ω–∞ <code>{} {}</code>

üîó <a href='{}'>–û–ø–ª–∞—Ç–∏—Ç—å</a></b>""",

        "check": """<b>üíµ –ß–µ–∫ –Ω–∞ <code>{} {}</code> {}

üîó <a href='{}'>–ü–æ–ª—É—á–∏—Ç—å</a></b>""",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "testnet",
                False,
                lambda: "Use testnet version of @xRocket",
                validator=loader.validators.Boolean()
            ),
        )

    xrocket_bot = "@xrocket"
    xrocket_testnetbot = "@ton_rocket_test_bot"


    async def client_ready(self, client, db):
        self.db = db
        self._client = client

    def bot(self):
        return self.xrocket_bot if not self.config['testnet'] else self.xrocket_testnetbot
        
    async def _create_invoice(self, amount, crypt):
        q = await self._client.inline_query(self.bot(), f"{amount} {crypt}")
        result = await q[0].click("me")
        await result.delete()
            
        link = result.reply_markup.rows[0].buttons[0].url

        return link
    
    async def _create_check(self, amount, crypt, user):
        q = await self._client.inline_query(self.bot(), f"{amount} {crypt} {user}")
        result = await q[0].click("me")
        await result.delete()

        if "–°—á—ë—Ç" in result.message:
            return "no_money"
            
        link = result.reply_markup.rows[0].buttons[0].url

        return link

    async def _get_wallet(self):
     while True:
      try:
        async with self._client.conversation(self.bot()) as conv:
            msg = await conv.send_message("/wallet")
            r = await conv.get_response()
            await msg.delete()
            await r.delete()
            return r
      except hikkatl.errors.common.AlreadyInConversationError:
          await asyncio.sleep(5.67)

    @loader.command()
    async def xwallet(self, message):
        """–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—à–µ–ª—ë–∫"""

        await utils.answer(message, self.strings['checking_wallet'])

        wm = await self._get_wallet()
    
        return await utils.answer(message, wm.text)
        
    @loader.command()
    async def xinvoice(self, message):
        """–°–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç"""
        
        args = utils.get_args_raw(message)

        try:
            amount, crypt = args.split(" ")
        except:
            return await utils.answer(message, self.strings['no_args'].format(self.get_prefix(), 'xinvoice [—Å—É–º–º–∞] [–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞]'))

        await utils.answer(message, self.strings['creating'].format("—Å—á—ë—Ç"))

        link = await self._create_invoice(amount, crypt)
    
        return await utils.answer(message, self.strings['invoice'].format(amount, crypt, link))
    
    @loader.command()
    async def xcheck(self, message):
        """–°–æ–∑–¥–∞—Ç—å —á–µ–∫"""
        
        args = utils.get_args_raw(message)

        user = ""

        try:
            try:
                amount, crypt, user = args.split(" ")
            except:
                amount, crypt = args.split(" ")
        except:
            return await utils.answer(message, self.strings['no_args'].format(self.get_prefix(), 'xcheck [—Å—É–º–º–∞] [–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞] [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)]'))

        await utils.answer(message, self.strings['creating'].format("—á–µ–∫"))

        link = await self._create_check(amount, crypt, user)

        if "no_money" in link:
            return await utils.answer(message, self.strings['no_money'])
    
        return await utils.answer(message, self.strings['check'].format(amount, crypt, (f"–¥–ª—è {user}" if user else ""), link))